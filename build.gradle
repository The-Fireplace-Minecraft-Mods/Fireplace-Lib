//file:noinspection GroovyAssignabilityCheck
plugins {
	// Dependencies
	id 'fabric-loom' version '0.11-SNAPSHOT'
	// Mod Hosting Publish
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'com.modrinth.minotaur' version '1.1.0'
	// Maven Publish
	id 'maven-publish'
	id 'signing'
	id 'io.codearte.nexus-staging' version '0.30.0'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

sourceSets {
	api {
		compileClasspath += sourceSets.main.compileClasspath
	}
	runtimetest {
		compileClasspath += sourceSets.main.compileClasspath
		compileClasspath += sourceSets.api.output
		compileClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.main.runtimeClasspath
		runtimeClasspath += sourceSets.api.output
		runtimeClasspath += sourceSets.main.output
	}
	main {
		compileClasspath += sourceSets.api.output
		runtimeClasspath += sourceSets.api.output
		runtimeClasspath += sourceSets.runtimetest.output
	}
}

archivesBaseName = project.archives_base_name
version = "${project.mod_version}+${project.minecraft_version}"
group = project.maven_group
if (project.hasProperty('SNAPSHOT')) {
	version = "${version}-SNAPSHOT"
}

repositories {
	maven { url 'https://maven.shedaniel.me/' }
	maven { url 'https://maven.terraformersmc.com/releases/' }
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
	flatDir { dirs 'lib' }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation "dev.the-fireplace:Annotated-DI:${project.annotateddi_version}"
	include "dev.the-fireplace:Annotated-DI:${project.annotateddi_version}"
	annotationProcessor "dev.the-fireplace:Annotated-DI:${project.annotateddi_version}:processor"

	modImplementation "io.github.prospector:modmenu:${project.modmenu_version}"
	modImplementation("me.shedaniel.cloth:config-2:${project.clothconfig_version}") {
		exclude(group: 'net.fabricmc.fabric-api')
		exclude(group: 'io.github.prospector')
	}
	include "me.shedaniel.cloth:config-2:${project.clothconfig_version}"

	compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
}

processResources {
	inputs.property 'version', project.version

	filesMatching('**/*.json') { fileCopyDetails ->
		fileCopyDetails.expand(
				'version': project.version,
				'name': project.readable_name,
				'description': project.mod_description,
				'github_url': project.github_url,
				'curseforge_url': project.curseforge_url,
				'modrinth_url': project.modrinth_url,
		)
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.release.set(8)
}

task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier.set('sources')
	from sourceSets.main.allSource + sourceSets.api.allSource
}

java {
	withJavadocJar()
	withSourcesJar()
}

javadoc.options.addStringOption('Xdoclint:none', '-quiet')

javadoc {
	source sourceSets.api.allJava
	source sourceSets.main.allJava
}

task apiJar(type: Jar, dependsOn: classes) {
	archiveClassifier.set('api')
	from sourceSets.api.output
	from 'src/api/dummyresources/fabric.mod.json'
}

build.dependsOn(apiJar)

jar {
	from sourceSets.api.output
	from('LICENSE') {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

configurations {
	apiElements.outgoing.artifact(apiJar)
}

if (hasProperty('curseForgeApiKey')) {
	curseforge {
		apiKey = curseForgeApiKey
		project {
			id = '432845'
			changelog = file('changelog.txt')
			releaseType = project.release_type
			addGameVersion project.minecraft_version
			addGameVersion 'Java 8'
			addGameVersion 'Fabric'
			mainArtifact(new File(new File(buildDir, 'libs'), "$archivesBaseName-${version}.jar")) {
				displayName = "$archivesBaseName-$version"
				relations {
					requiredDependency 'fabric-api'
					embeddedLibrary 'cloth-config'
					embeddedLibrary 'annotated-di'
					optionalDependency 'modmenu'
				}
			}
		}
		options {
			javaIntegration = false
			forgeGradleIntegration = false
		}
	}
}

import com.modrinth.minotaur.TaskModrinthUpload
if (hasProperty('modrinthApiKey')) {
	task publishModrinth(type: TaskModrinthUpload) {
		token = modrinthApiKey
		projectId = 'ING0LAPF'
		versionNumber = version
		versionName = project.mod_version
		uploadFile = new File(new File(buildDir, 'libs'), "$archivesBaseName-${version}.jar")
		changelog = file('changelog.txt').getText()
		releaseType = project.release_type
		addGameVersion(project.minecraft_version as String)
		addLoader('fabric')
	}
}

if (hasProperty('nexusUsername') || System.getenv("NEXUS_USERNAME") != null) {
	publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.java
				pom {
					name = project.readable_name
					packaging = 'jar'
					description = project.maven_description
					url = project.curseforge_url
					scm {
						connection = "scm:svn:${project.github_url}.git"
						developerConnection = "scm:svn:${project.github_url}.git"
						url = project.github_url
					}

					licenses {
						license {
							name = 'The MIT License'
							url = 'https://opensource.org/licenses/MIT'
						}
					}

					developers {
						developer {
							id = 'the_fireplace'
							name = 'The_Fireplace'
							email = 'git@the-fireplace.dev'
						}
					}
				}
			}
		}
		repositories {
			maven {
				def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
				def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
				url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
				credentials {
					username = findProperty('nexusUsername') ?: System.getenv("NEXUS_USERNAME")
					password = findProperty('nexusPassword') ?: System.getenv("NEXUS_PASSWORD")
				}
			}
		}
	}

	signing {
		sign publishing.publications.mavenJava
	}
}